package com.example.my_shoplist_application.ui.viewmodel

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update

data class ShoppingList(
    val id: String,
    val name: String,
    val isPinned: Boolean = false
)

class ShoppingListViewModel: ViewModel() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
    private val _shoppingLists = MutableStateFlow<List<ShoppingList>>(
        listOf(
            ShoppingList("1", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—Ä—Ç–∞", true),
            ShoppingList("2", "–£–∫—Ä–∞—à–µ–Ω–∏—è –Ω–∞ –ù–æ–≤—ã–π –≥–æ–¥üéÑ"),
            ShoppingList("3", "–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è –¥–µ—Ç—è–º")
        )
    )
    val shoppingLists = _shoppingLists.asStateFlow()

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    private val _isDialogVisible = MutableStateFlow(false)
    val isDialogVisible = _isDialogVisible.asStateFlow()

    // –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    fun togglePin(id: String) {
        _shoppingLists.update { lists ->
            lists.map { list ->
                if (list.id == id) {
                    list.copy(isPinned = !list.isPinned)
                } else {
                    list
                }
            }.sortedByDescending { it.isPinned }
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    fun deleteList(id: String) {
        _shoppingLists.update { lists ->
            lists.filter { it.id != id }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    fun addNewList(name: String) {
        if (name.isNotBlank()) {
            val newId = (_shoppingLists.value.size + 1).toString()
            val newList = ShoppingList(newId, name)

            _shoppingLists.update { currentLists ->
                (currentLists + newList).sortedByDescending { it.isPinned }
            }
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–º
    fun showDialog() {
        _isDialogVisible.value = true
    }

    fun hideDialog() {
        _isDialogVisible.value = false
    }
}